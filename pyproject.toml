[project]
name = "tonika-bus"
version = "0.2.0"
description = "Event-driven message broker for modular music production - Music as Resistance"
readme = "README.md"
requires-python = ">=3.11"
license = { text = "GPL-3.0-or-later" }
authors = [{ name = "aa-parky", email = "aa-parky@gmail.com" }]
keywords = ["music", "midi", "event-bus", "modular", "audio", "music-theory"]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Multimedia :: Sound/Audio :: MIDI",
  "Topic :: Software Development :: Libraries :: Python Modules",
]

# Core dependencies (minimal - just what the Bus needs)
dependencies = [
  # No runtime dependencies for core Bus!
  # Adapters will have their own dependencies
]

[project.optional-dependencies]
# MIDI support via adapters
midi = ["mido>=1.3.0", "python-rtmidi>=1.5.0"]

# Music theory support via adapters
theory = ["music21>=9.1.0"]

# All adapters (MIDI and theory)
adapters = ["mido>=1.3.0", "python-rtmidi>=1.5.0", "music21>=9.1.0"]

# Development dependencies
dev = [
  # Testing
  "pytest>=8.0.0",
  "pytest-asyncio>=0.23.0",
  "pytest-cov>=4.1.0",
  "pytest-mock>=3.12.0",

  # Code quality
  "ruff>=0.1.0",   # Fast linter (replaces flake8, isort, etc.)
  "mypy>=1.8.0",   # Type checking
  "black>=24.0.0", # Code formatting

  # Documentation
  "sphinx>=7.2.0",
  "sphinx-rtd-theme>=2.0.0",

  # Build tools
  "build>=1.0.0",
  "twine>=4.0.0",
]

# Everything (for easy local development)
# Everything (for easy local development)
all = [
  "mido>=1.3.0",
  "python-rtmidi>=1.5.0",
  "music21>=9.1.0",
  "pytest>=8.0.0",
  "pytest-asyncio>=0.23.0",
  "pytest-cov>=4.1.0",
  "pytest-mock>=3.12.0",
  "ruff>=0.1.0",
  "mypy>=1.8.0",
  "black>=24.0.0",
  "sphinx>=7.2.0",        # ← Add these
  "sphinx-rtd-theme>=2.0.0",  # ← Add these
  "build>=1.0.0",         # ← Add these
  "twine>=4.0.0",         # ← Add these
]


[project.urls]
Homepage = "https://github.com/aa-parky/tonika"
Repository = "https://github.com/aa-parky/tonika_bus"
Documentation = "https://github.com/aa-parky/tonika_bus/docs"
"Bug Tracker" = "https://github.com/aa-parky/tonika_bus/issues"

[build-system]
requires = ["setuptools>=68.0", "wheel"]  # setuptools 68+ works fine with 3.11
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = ["tonika_bus", "tonika_bus.core"]

[tool.setuptools.package-dir]
"" = "src"

# ============================================================================
# Testing Configuration (pytest)
# ============================================================================

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Async support
asyncio_mode = "auto"

# Coverage options
addopts = [
  "--strict-markers",
  "--strict-config",
  "--cov=tonika_bus",
  "--cov-report=term-missing",
  "--cov-report=html",
  "--cov-report=xml",
  "--cov-branch",
  "-ra",                       # Show summary of all test outcomes
  "-v",                        # Verbose
]

# Markers for organizing tests
markers = [
  "unit: Unit tests (fast, no external dependencies)",
  "integration: Integration tests (may require MIDI devices)",
  "slow: Slow tests (skip with -m 'not slow')",
  "midi: Tests requiring MIDI hardware",
]

# ============================================================================
# Code Quality Configuration (ruff)
# ============================================================================

[tool.ruff]
target-version = "py312"
line-length = 100

# Enable specific rule sets
select = [
  "E",   # pycodestyle errors
  "W",   # pycodestyle warnings
  "F",   # pyflakes
  "I",   # isort
  "N",   # pep8-naming
  "UP",  # pyupgrade
  "B",   # flake8-bugbear
  "C4",  # flake8-comprehensions
  "SIM", # flake8-simplify
  "RET", # flake8-return
]

# Ignore specific rules
ignore = [
  "E501", # Line too long (handled by black)
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101"] # Allow assert in tests

# ============================================================================
# Type Checking Configuration (mypy)
# ============================================================================

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true

# Allow untyped calls for third-party libraries without stubs
[[tool.mypy.overrides]]
module = ["mido.*", "music21.*"]
ignore_missing_imports = true

# ============================================================================
# Code Formatting Configuration (black)
# ============================================================================

[tool.black]
line-length = 100
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.venv
  | build
  | dist
)/
'''

# ============================================================================
# Coverage Configuration
# ============================================================================

[tool.coverage.run]
source = ["tonika_bus"]
omit = [
  "*/tests/*",
  "*/test_*.py",
  "*/__pycache__/*",
  "*/example_usage.py",  # ← Add this
  "*/examples/*"         # ← Add this
]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "raise AssertionError",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
  "@abstractmethod",
]
